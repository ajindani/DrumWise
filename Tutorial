// Pins for LEDs (in order: A4 → 10, A5 → 9, A3 → 11)
int ledPins[3] = {10, 9, 11};
// Pins for Piezo sensors (in order: A4, A5, A3)
int piezoPins[3] = {A4, A5, A3};
// Thresholds for strike detection 
int thresholds[3] = {250, 500, 50};

// LED game state variables
bool ledStates[3] = {false, false, false};
int activeLED = -1; // index of currently active LED, -1 if none
unsigned long ledOnTime = 0;
unsigned long gameStartTime = 0;
unsigned long lastFlashTime = 0;
bool gameOver = false;
bool flashState = false;

unsigned long changeInterval = 2000; // time between random activations (ms)

void setup() {
  Serial.begin(9600);
  for (int i = 0; i < 3; i++) {
    pinMode(ledPins[i], OUTPUT);
    digitalWrite(ledPins[i], LOW);
  }
  randomSeed(analogRead(0)); // random seed from analog noise
  gameStartTime = millis();
}

void loop() {
  unsigned long currentTime = millis();

  if (gameOver) {
    // Flash all LEDs on and off every 500ms
    if (currentTime - lastFlashTime >= 500) {
      flashState = !flashState;
      for (int i = 0; i < 3; i++) {
        digitalWrite(ledPins[i], flashState ? HIGH : LOW);
      }
      lastFlashTime = currentTime;
    }
    return;
  }

  // If no active LED, pick a random one at intervals
  if (activeLED == -1 && currentTime - gameStartTime > changeInterval) {
    activeLED = random(0, 3);
    ledStates[activeLED] = true;
    digitalWrite(ledPins[activeLED], HIGH);
    ledOnTime = currentTime;
  }

  // Check if active LED is left on too long (game over)
  if (activeLED != -1 && currentTime - ledOnTime > 2500) {
    gameOver = true;
    return;
  }

  // Check for strike to turn off active LED
  for (int i = 0; i < 3; i++) {
    int sensorValue = analogRead(piezoPins[i]);
    if (sensorValue >= thresholds[i] && activeLED == i) {
      digitalWrite(ledPins[i], LOW);
      ledStates[i] = false;
      activeLED = -1;
      gameStartTime = currentTime;
      changeInterval = random(1500, 4000); // set time until next LED turns on
    }
  }
}
